<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ifournight's blog</title>
    <description></description>
    <link>http://ifournight.github.io</link>
    <atom:link href="http://ifournight.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Revisit inheritance and prototype of JS</title>
        <description>&lt;h2&gt;Revisit Object&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;An object is a container of properties, &amp;hellip; A property name can be any string, include the empty string. A property value can be any JavaScipt value except for &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course property name should be string, but when in practive this week I just write a object which has a number property. This should be a syntax error, but the error never happen, my guess is that the JS transcriptor just implicitly tranfer the number to the corresponding string.&lt;/p&gt;

&lt;p&gt;Get the value of &lt;code&gt;undefined&lt;/code&gt; will cause &lt;code&gt;TypeError&lt;/code&gt;, so there are serveral tricks to avoid this, leared from JavaScript: The Good Parts：&lt;/p&gt;

&lt;p&gt;Use || operator to assign default value:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;property&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;defaultValue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using &amp;amp;&amp;amp; operator to protect getting value from &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;delete&lt;/h3&gt;

&lt;p&gt;delete will only remove the object&amp;rsquo;s own property, it will not touch the prototype chain.&lt;/p&gt;

&lt;h2&gt;Revisit prototype&lt;/h2&gt;

&lt;h3&gt;Some wireds.&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;constructor must be a &lt;code&gt;Function&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In classical inheritance, only constructor has a prototype property pointing at its prototype, not the instance of the constructor.In ECMA-262 fifth edition，instance of the constructor will have a implict potiner[[Prototype]], mordern browsers implement the [[Prototype]] as &lt;code&gt;__super__&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Revisit inheritance&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;What matters about an object is what it can do, not what it is descended from.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I highly agree with what DC said in &lt;em&gt;The Good Part book&lt;/em&gt;, and I try to understand 4 inheritance patterns he metioned in this book. There&amp;rsquo;s maybe much more complicated patterns, but:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Much more complicated constructions are possible, but it is usually best to keep it simple.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Pseudoclassical&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s important to understand what &lt;code&gt;new&lt;/code&gt; really do if it is a function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Create a plain constructor.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assign prototype.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Well, I guess we can&amp;#39;t use new to explain new,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// so I am still confused about this line.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;new&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create a new object that inherits from the constructor&amp;#39;s prototype.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// That&amp;#39;s is why the instance don&amp;#39;t have prototype property.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Invoke the constructor, binding -this- to &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the new object.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If its return value isn&amp;#39;t an object,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// substitue the new object.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;object&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s still one line code I can&amp;rsquo;t understand, which is DC use &lt;code&gt;new&lt;/code&gt; prefix in beget method to explain new method.
Here is the internal process that in my understanding:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The constructor as a function, when used with &lt;code&gt;new&lt;/code&gt; prefix, create a plain object, and assign the object&amp;rsquo;s [[prototype]] to constructor&amp;rsquo;s prototype.&lt;/li&gt;
&lt;li&gt;The code inside constructor function execute under the context of the new object, like a process of initilization.&lt;/li&gt;
&lt;li&gt;If the constructor function has a return value, the value is returned, instead the new object is returned.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If using pseudoclassical, Capitalize and only capitalize the Contructor, always use &lt;code&gt;new&lt;/code&gt; prefix.&lt;/p&gt;

&lt;h3&gt;Prototypal&lt;/h3&gt;

&lt;p&gt;Prototypal pattern still use prototype, what it get rid of is &amp;lsquo;The entire class stuff&amp;rsquo; and the &lt;code&gt;new&lt;/code&gt; prefix. The example from &lt;em&gt;The Good Part&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myMammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s no class in prototypal pattern, methods and propertys of one object can be fetched by another object directly.
So there&amp;rsquo;s no constructor, no instance, there&amp;rsquo;s only objects which inherit from its prototype.&lt;/p&gt;

&lt;h3&gt;Functional&lt;/h3&gt;

&lt;p&gt;Functional gives up the prototype, and use function to achieve inheritance. Four steps of &lt;strong&gt;Functional&lt;/strong&gt; inheritance:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new object, with

&lt;ul&gt;
&lt;li&gt;Object literal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; Constructor(Pseudoclassical)&lt;/li&gt;
&lt;li&gt;Object.create(Prototypal)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Optionally) defines private instances variables and methods.&lt;/li&gt;
&lt;li&gt;Add methods into the new object, which can access the private instances variables and methods.&lt;/li&gt;
&lt;li&gt;return the new object.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The pseudocode template:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// other private instance variables;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Add shared variables and functions to my&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Add privileged methods to that&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Durable Object&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we create an object in the functional style, and if all of the methods of the object make no use of &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;that&lt;/code&gt;, then the object is durable. A durable object is simply a collection of functions that act as capabilities.&lt;/p&gt;&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 13 Jan 2014 11:36:00 +0000</pubDate>
        <link>http://ifournight.github.io/2014/01/13/inheritance-and-prototype-revisit/</link>
        <guid isPermaLink="true">http://ifournight.github.io/2014/01/13/inheritance-and-prototype-revisit/</guid>
      </item>
    
  </channel>
</rss>